name: Security Audit

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: [main]
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
  schedule:
    # Run once a week on Sunday at 00:00 UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Run security audit
        run: pnpm audit
        continue-on-error: true
        
      - name: Generate audit report
        run: |
          mkdir -p audit-report
          pnpm audit --json > audit-report/audit.json
          echo "### NPM Security Audit Summary" > audit-report/summary.md
          echo "" >> audit-report/summary.md
          echo "Run completed on: $(date)" >> audit-report/summary.md
          echo "" >> audit-report/summary.md
          
          # Extract vulnerability counts by severity
          critical=$(cat audit-report/audit.json | grep -c '"severity":"critical"' || echo 0)
          high=$(cat audit-report/audit.json | grep -c '"severity":"high"' || echo 0)
          moderate=$(cat audit-report/audit.json | grep -c '"severity":"moderate"' || echo 0)
          low=$(cat audit-report/audit.json | grep -c '"severity":"low"' || echo 0)
          
          echo "| Severity | Count |" >> audit-report/summary.md
          echo "|----------|-------|" >> audit-report/summary.md
          echo "| Critical | $critical |" >> audit-report/summary.md
          echo "| High     | $high |" >> audit-report/summary.md
          echo "| Moderate | $moderate |" >> audit-report/summary.md
          echo "| Low      | $low |" >> audit-report/summary.md
          
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report/
          
      - name: Create issue if critical vulnerabilities found
        if: ${{ always() && github.event_name != 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const auditData = fs.readFileSync('audit-report/audit.json', 'utf8');
              const audit = JSON.parse(auditData);
              
              // Check if there are any critical vulnerabilities
              const criticalVulns = Object.values(audit.vulnerabilities || {})
                .filter(vuln => vuln.severity === 'critical');
              
              if (criticalVulns.length > 0) {
                // Create an issue
                const issueTitle = `ðŸš¨ Critical Security Vulnerabilities Detected: ${criticalVulns.length}`;
                
                // Build issue body
                let issueBody = `## Critical Security Vulnerabilities Detected
                
                The security audit has detected ${criticalVulns.length} critical vulnerabilities in the project dependencies.
                
                ### Vulnerabilities
                `;
                
                criticalVulns.forEach(vuln => {
                  issueBody += `
                  #### ${vuln.name}: ${vuln.title || 'Unnamed vulnerability'}
                  
                  - Severity: ${vuln.severity}
                  - Via: ${Array.isArray(vuln.via) ? vuln.via.join(', ') : vuln.via}
                  - Fix available: ${vuln.fixAvailable ? 'Yes' : 'No'}
                  ${vuln.url ? `- More info: ${vuln.url}` : ''}
                  `;
                });
                
                issueBody += `
                ### Recommended Action
                
                Please review these vulnerabilities and update the affected dependencies as soon as possible.
                `;
                
                // Check if there's already an open issue for security vulnerabilities
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: ['security'],
                });
                
                const existingIssue = issues.data.find(issue => 
                  issue.title.includes('Critical Security Vulnerabilities Detected'));
                
                if (existingIssue) {
                  // Update existing issue
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingIssue.number,
                    body: issueBody,
                  });
                  console.log(`Updated existing issue #${existingIssue.number}`);
                } else {
                  // Create new issue
                  const newIssue = await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: issueTitle,
                    body: issueBody,
                    labels: ['security', 'dependencies'],
                  });
                  console.log(`Created new issue #${newIssue.data.number}`);
                }
              }
            } catch (error) {
              console.log('Error processing audit results:', error);
            }
