name: Deploy to Cloudflare Pages

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Build
        run: pnpm build:prod
        
      - name: Create deployment info file
        run: |
          cat > dist/deployment-info.json << EOL
          {
            "version": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "environment": "${{ github.event.inputs.environment || 'production' }}"
          }
          EOL
        
      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=saga-spells ${{ github.event.inputs.environment == 'staging' && '--branch=staging' || '' }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Post deployment comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Determine URL based on environment
            const baseUrl = 'https://saga-spells.pages.dev';
            const url = process.env.ENVIRONMENT === 'staging' 
              ? `https://staging.saga-spells.pages.dev` 
              : baseUrl;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ App successfully deployed to Cloudflare Pages!\n\nURL: ${url}\n\nEnvironment: ${process.env.ENVIRONMENT}`
            });
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
