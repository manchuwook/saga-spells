name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1' # Run weekly on Mondays

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Build for production
        run: pnpm build:prod
        
      - name: Start server
        run: npx serve -s dist &
        
      - name: Run Lighthouse CI
        id: lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: false
          temporaryPublicStorage: true
          configPath: './.github/lighthouse/config.json'
          
      - name: Create Lighthouse report directory
        run: mkdir -p ./lighthouse-report
        
      - name: Save Lighthouse results
        if: always()
        run: |
          if [ -n "${{ steps.lighthouse.outputs.manifest }}" ]; then
            echo '${{ steps.lighthouse.outputs.manifest }}' > ./lighthouse-report/manifest.json
            echo '${{ steps.lighthouse.outputs.links }}' > ./lighthouse-report/links.json
            
            # Extract and save individual reports
            for url in $(echo '${{ steps.lighthouse.outputs.manifest }}' | jq -r '.[].url'); do
              urlSlug=$(echo "$url" | sed 's/[^a-zA-Z0-9]/_/g')
              echo '${{ steps.lighthouse.outputs.manifest }}' | jq --arg url "$url" '.[] | select(.url == $url)' > "./lighthouse-report/report-${urlSlug}.json"
            done
          fi
          
      - name: Upload Lighthouse artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse-report
          if-no-files-found: ignore
          
      - name: Format Lighthouse results as PR comment
        if: github.event_name == 'pull_request' && steps.lighthouse.outputs.manifest != ''
        uses: actions/github-script@v7
        env:
          LIGHTHOUSE_RESULTS: ${{ steps.lighthouse.outputs.manifest }}
        with:
          script: |
            const results = process.env.LIGHTHOUSE_RESULTS;
            if (!results) {
              console.log('No lighthouse results found');
              return;
            }
            
            try {
              const lighthouseResults = JSON.parse(results);
              if (!lighthouseResults || !lighthouseResults[0]) {
                console.log('Invalid lighthouse results format');
                return;
              }
              
              const summary = lighthouseResults[0].summary || {};
              const links = lighthouseResults[0].links || {};
              
              const getScore = (category) => {
                return summary[category] ? Math.round(summary[category] * 100) + '%' : 'N/A';
              };
              
              const createTable = () => {
                return `
                | Category | Score | Threshold |
                | -------- | ----- | --------- |
                | Performance | ${getScore('performance')} | 90% |
                | Accessibility | ${getScore('accessibility')} | 90% |
                | Best Practices | ${getScore('best-practices')} | 90% |
                | SEO | ${getScore('seo')} | 90% |
                | PWA | ${getScore('pwa')} | 90% |
                `;
              };
              
              const comment = `## ðŸš¦ Lighthouse Report

${createTable()}

${links.html ? `[View Full Report](${links.html})` : 'No report link available'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error parsing lighthouse results:', error);
            }
